
/* Variables
–––––––––––––––––––––––––––––––––––––––––––––––––– */

$device-breakpoints: (
  // mobile portrait
  xs-sm: 360px,
  xs-md: 400px,
  xs-lg: 480px,
  // mobile landscape, tablet portrait
  sm-sm: 600px,
  sm-md: 720px,
  sm-lg: 840px,
  // tablet landscape, small screen
  md-sm: 960px,
  md-md: 1024px,
  md-lg: 1280px,
  // large screen, television
  lg-sm: 1440px,
  lg-md: 1600px,
  lg-lg: 1920px
);

$viewport-xs-sm: map-get($device-breakpoints, xs-sm);
$viewport-xs-md: map-get($device-breakpoints, xs-md);
$viewport-xs-lg: map-get($device-breakpoints, xs-lg);

$viewport-sm-sm: map-get($device-breakpoints, sm-sm);
$viewport-sm-md: map-get($device-breakpoints, sm-md);
$viewport-sm-lg: map-get($device-breakpoints, sm-lg);

$viewport-md-sm: map-get($device-breakpoints, md-sm);
$viewport-md-md: map-get($device-breakpoints, md-md);
$viewport-md-lg: map-get($device-breakpoints, md-lg);

$viewport-lg-sm: map-get($device-breakpoints, lg-sm);
$viewport-lg-md: map-get($device-breakpoints, lg-md);
$viewport-lg-lg: map-get($device-breakpoints, lg-lg);

// ngMaterial Breakpoints + xs/xl
// ------------------------------

$viewport-xs: $viewport-xs-sm;
$viewport-sm: $viewport-sm-sm;
$viewport-md: $viewport-md-sm;
$viewport-lg: 1200px;
$viewport-xl: $viewport-lg-md;


/* Functions
–––––––––––––––––––––––––––––––––––––––––––––––––– */


// Retrieve name of next breakpoint (or null for last)
// ------------------------------

@function next-bp($name, $bps: $device-breakpoints, $names: map-keys($bps)) {
  $n: index($names, $name);
  @return if($n < length($names), nth($names, $n + 1), null);
}

// Retrieve breakpoint min width (or null for first)
// ------------------------------

@function min-bp($name, $bps: $device-breakpoints) {
  $min: map-get($bps, $name);
  @return if($min != 0, $min, null);
}


// Retrieve breakpoint max width (or null for last)
// ------------------------------

@function max-bp($name, $bps: $device-breakpoints) {
  $next: next-bp($name, $bps);
  @return if($next, min-bp($next, $bps) - 1px, null);
}


/* Mixins
–––––––––––––––––––––––––––––––––––––––––––––––––– */


// breakpoint <=
// ------------------------------
@mixin media-gt($name, $bps: $device-breakpoints) {
  $min: min-bp($name, $bps);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  }
  @else {
    @content;
  }
}

// < breakpoint
// ------------------------------
@mixin media-lt($name, $bps: $device-breakpoints) {
  $max: max-bp($name, $bps);
  @if $max {
    @media (max-width: $max - 1px) {
      @content;
    }
    @else {
      @content;
    }
  }
}

// breakpoint-min <= x < breakpoint-max
// ------------------------------
@mixin media($name, $bps: $grid-breakpoints) {
  @include media-gt($name, $bps) {
    @include media-lt($name, $bps) {
      @content;
    }
  }
}


$aspect-ratios: (
// 1.20:1 (6:5) Fox Movietone aspect ratio
  83.33%,
// 1.25:1 (5:4) Early television & large-format computer monitors
  80.00%,
// 1.33:1 (4:3) Traditional television & computer monitor standard
  75.00%,
// 1.375:1 Academy standard film aspect ratio
  72.73%,
// 1.41:1 √2:1 ~1.4142:1, ISO 216 paper sizes (A4)
  70.71%,
// 1.43:1 IMAX motion picture film format
  69.93%,
// 1.5:1 (3:2) Classic 35 mm still photographic film
  66.67%,
// 1.6:1 (16:10 or 8:5) A common computer screen ratio.
  62.50%,
// 1.6180:1 (16.18:10) The golden ratio
  61.80%,
// 1.6667:1 (5:3) A common European widescreen std.; Native Super 16 mm film.
  60.00%,
// 1.77:1 or 1.78:1 (16:9) HD video std.; U.S. digital broadcast TV std.
  56.25%,
// 1.85:1 A common US widescreen cinema standard
  54.05%,
// 2.35:1 or 2.39:1 A current widescreen cinema standard
  42.55%
);

/**
 *  Do not remove this comments bellow. It's the markers used by wiredep to inject
 *  sass dependencies when defined in the bower.json of your dependencies
 */
// bower:scss
// endbower

html {
  font-family: 'Source Sans Pro', 'Helvetica Neue', Verdana, sans-serif;
  height: 100%;
}

body {
  height: 100%;
}

html,
body {
  overflow-x: hidden;
  overflow-y: hidden;
}

@mixin all-height($height) {
  max-height: $height !important;
  min-height: $height !important;
  height: $height !important;
}

@mixin all-width($width) {
  max-width: $width !important;
  min-width: $width !important;
  width: $width !important;
}

md-toolbar.gp-toolbar {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  @include all-height(36px);
  background: transparent;
  background: rgba(34, 34, 34, 1.00);
  &.gp-toolbar-main {
    z-index: 500;
  }
  .md-toolbar-tools {
    @include all-height(36px);
    padding-left: 12px;
    padding-right: 12px;
  }
}

md-sidenav.md-sidenav-left {
  background: transparent;
  @include all-width(256px);
  z-index: 900;
  .gp-toolbar {
    background: transparent;
  }
}

.brand-stripes,
.brand-text {
  cursor: pointer;
}

.browsehappy {
  margin: 0.2em 0;
  background: #ccc;
  color: #000;
  padding: 0.2em 0;
}

// remove md-sidenav backdrop above md
@media (min-width: 960px) {
  md-backdrop.md-sidenav-backdrop {
    display: none;
  }
}

@media (max-width: $viewport-md - 1px) {
  .gp-video-container {
    @include all-width(100%);
    @include all-height(45%);
  }
  .gp-content.md-locked-open {
    @include all-width(100%);
    @include all-height(65%);
  }
}
@media (min-width: $viewport-md) {
  .gp-video-container {
    @include all-height(100%);
    //@include all-width(65%);
  }
  .gp-content.md-locked-open {
    @include all-height(100%);
    @include all-width(35%);
  }
}
@media (min-width: $viewport-lg) {
  .gp-video-container {
    @include all-height(100%);
    //@include all-width(65%);
  }
  .gp-content.md-locked-open {
    @include all-height(100%);
    @include all-width(35%);
  }
}
@media (min-width: $viewport-xl) {
  .gp-video-container {
    @include all-height(100%);
    //@include all-width(75%);
  }
  .gp-content.md-locked-open {
    @include all-height(100%);
    @include all-width(25%);
  }
}

.sidebar {
  margin-top: 36px;
  background-color: #222;
  md-icon {
    color: #fff;
    &.md-svg-icon {
      > span {
        > svg {
          display: inline;
          height: 24px;
          width: auto;
          text-align: center;
          margin-bottom: 8px;
          &.paypal {
            height: 20px;
          }
          &.bitcoin {
            margin-left: 4px;
            height: 22px;
          }
          &.reddit {
          }
        }
      }
    }
  }
}

md-sidenav.md-sidenav-left {
  margin-top: 36px;
  background: transparent;
  md-content.sidenav-content {
    background: transparent;
  }
}


/**
 *  Do not remove this comments bellow. It's the markers used by gulp-inject to inject
 *  all your sass files automatically
 */
// injector
// endinjector
